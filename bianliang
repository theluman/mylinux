bash变量类型：
  环境 
 本地(局部) 
 位置 $1,$2
  特殊 $? 脚本执行后返回值  $#参数的个数 $*参数列表  $@ 参数列表
变量型：
字符串
整数
浮点数
布尔
空 null

${animal}s

""做变量替换
''不做变量替换
``先执行在返回

export varname=value 将变量设定为环境变量
系统自动执行的脚本 需要定义环境变量

位置变量 $1 $2
特殊变量
$? 上一次执行的返回值  0是成功 大于0是错误

输出重定向
>
>>
2>
2>>
&>
撤销变量
unset VARNAME

查看当前shell中变量
set
查看当前shell中环境变量
printenv
env
export

/dev/null 数据黑洞 
shebang 魔数
#!/bin/bash
#!/bin/python
#注释

条件判断：
bash中如何实现条件判断
条件测试类型
 整数测试
 字符测试
 文件测试
条件测试的表达式
 [ expression ] 命令测试法
 [[ expression ]] 关键字测试法
 test expression

整数比较
 -eq 两个整数是否相等
 -ne 两个整数是否不等
 -gt 大于
 -lt 小于
 -ge 大于或等于
 -le 小于或等于
文件测试
-e file 测试文件是否存在
-f file 测试文件是否为普通文件
-d file 测试指定路径是否为目录
-r file 测试当前用户对指定文件是否有读权限
-w
-x
字符串测试
=赋值
== 测试是否相同 相等为真，不等为假
!= 测试是否不同 不同为真，相同为假 
-n string 测试字符串是否为空 空为真，不空则假
-z string 测试字符串是否不为空，不空为真，空则假
>
<

组合测试条件
 -a 与
 -o 或
 ! 取反

if [ $# -gt 1 -o $# -lt 5 ]
if [ $# -gt 1 ] && [ $# -lt 5 ]

命令间的逻辑关系
 逻辑与 &&
第一个条件为假，第二个条件不用判断，最终假
第一个为真，第二条必须判断
 逻辑或 ||
第一条为假，第二条必须判断
第一条为真，第二条不用判断

非,取反
!   
! id user6 && useradd user6

算数运算：
shell默认变量都是字符型
A=3 B=4 C=$A+$B=3+4
算数运算：
1.  let 算数表达式   let C=$A+$B
2. $[算数运算表达式] C=$[$A+$B]
3. $((算数运算式))   C=$(($A+$B))
4. expr 算数运算表达式，表达式中要用空格隔开，而且要使用命令引用 C=`expr $A + $B`
SUM+=$I 加等
SUM-=$I 减等
*=     
/=    
%=   


bash 脚本位置变量
$1 ,$2,...
shift [NUM] 轮替位置变量，剔除参数
特殊变量
$? 脚本执行返回值
$# 参数的个数
$* $@ 参数列表

declare 
 -i    declare -i sum=0   定义整数型变量
 -x   declare -x SUM=ii   将变量声明为环境变量


bash -n 脚本 检测脚本语法是否有错误
bash -x 单步执行脚本

exit:退出脚本 正常退出码是0
exiet NUM 自定义退出码

判断
if 判断条件
then
 statement1
 ...
 ...
fi

if 判断条件
then
 statement1
 .....
 ....
else
 statement3
 ......
 ....
fi

if 判断条件
then
 statement1
 ....
 ...
elif
 statement3
 ....
 ....
else
 ...
 ...
fi

if 判断条件;then
else

循环：进入条件，退出条件
for,while,until

for
for 变量 in 列表;do
    循环体
done

for 变量 in 列表
do
     循环体
done

生成列表
{1..100}  1-100

{起始数..结束数}
`seq [起始数] [步进长度] 结束数`
seq 10  1-10
seq 5 10  5-10
seq 1 2 10  1 3 5-9

`ls /etc`

面向过程
  控制结构
    顺序结构
    选择结构
      if:单分之 双分之 多分支
    循环结构
if执行速度慢，都要比较

case:

case SWITCH in
value1)
  statement
  ...
  ;;
value2)
  statement
  ...
  ;;
*)
  statement
  ..
  ;;
esac
_______________
case $1 in
[0-9])
  echo "Lower" ;;
[a-z])
  echo "Upper" ;;
*)
  echo "Special character" ;;
esac
————————————
case $1 in
[0-9])
  echo "Lower"
  ;;
[a-z])
  echo "Upper"
  ;;
*)
  echo "Special character"
  ;;
esac

while：适用循环次数未知的场景
while ... ;do
  ....
done

untile ... ;do
  ...
done

break 提前退出循环
continue 结束本轮循环，进入下轮循环

特殊用法：
一直循环
while :;do

done
until ...;do
...
done

读取一个文件中的每一行，并分别处理
while read LINE; do

done < /PATH/TO/SOMEFILE

函数：
  实现代码重用
定义一个函数：
function FUNCNAME {
command
}
或


FUNCNAME() {
command
}
调用：
FUNCNAME
FUNCNAME 参数 参数。。。
自定义执行状态返回码：
return #
0-255

接受参数的函数,传递参数给函数和给脚本参数一样
two 5 6
$1 5
$2 6

TWO() {
    echo $[$1+$2]
}

TWO 5 6

SUM = `TWO 5 6`

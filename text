cat
  -n 显示行号
  -E 显示行结束符，对linux而言，行结束符是$符，windows文本行结束符是$加回车符
  -b 类似-n,只不过对于空白行不编号
  -s 遇到有连续两行以上的空白行，替换为一个空白行
  ....
cat file1 file2 file3 > filetotal  合并多个文件为一个文件

tac 反过来显示每一行，结尾变为第一行

head 查看前n行，默认10

tail 查看最后n行，默认10
 -n
 -f  查看文件尾部，不退出，等待显示后续追加至此文件的内容
 
cut
 -d 指定字段分隔符
 -f 指定要显示的字段
    -f 1,3
    -f 1-3

join
 
sort
-n 数值排序
-r降序
-t自定字段分隔符
-k以哪个字符为关键字排序
-u 排序后相同的行只显示一次
-f忽略字符大小写

uniq  = sort -u
linux如果两行即使完全一样但是不相邻的情况 被认为是不同的行
-d 只显示重复的行
-D 显示所有重复的行
-c 显示文件中行重复的次数
-u 删除交集，留下其他行

wc
-l
-w
-c
-L

tr 'source' 'dest' 替换字符集
 tr 'a-z' 'A-Z' < /etc/passwd  逐个字符进行比较
 -d 删除出现在字符集中的所有字符 逐个字符进行处理

正则表达式：
通配符

* 任意长度的任意字符
？任意单个字符
[] 匹配指定范围内的任意单个字符
 [abc],[a-m],[a-z],[A-Z],[0-9],[a-zA-Z]
[^] 匹配指定范围内的任意单个字符

正则REGular EXPression REGEXP
元字符：

. 匹配任意单个字符
匹配次数 （贪婪模式）
* 匹配其前面的字符任意次
.*任意长度的任意字符
\? 匹配其前面的字符1次或0次
\{m,n\}匹配其前面的字符至少m次，至多n次

   位置锚定：
   ^行首 
   $行尾
   ^$ 空白行
   
   \<或\b 词首
   \>或\b 词尾
      \<root\>

   分组：
   \(\)
   \(ab\)*
   后向引用
   \1第一个左括号以及对应的右括号对应的引用  \2  \3  \4...

basic regexp 基本正则
extended regexp 扩展正则

basic :
字符匹配
. [] [^]
次数匹配
* \? \{m,n\}
位置锚定
^ $ \< \b \> \b
分组
\(\)
\1 \2 \3

扩展正则 
grep -E ''
grep -E = egrep
字符
. [] [^]
次数
* ？
+ 匹配其前面的字符至少一次
{m,n} 
^ $ \< \> 
() \1 \2 \3

|或
(c|C)at


grep [OPTIONS] PATTERN [FILE...]
grep
根据模式搜索文本，并将符合模式的文本行显示出来
模式：文本字符和正则表达式的元字符组合而成的匹配条件
-i 忽略大小写
--color 匹配到的加颜色
-v 显示没有被匹配到的行
-o 只显示被模式匹配到的字符串
-n 显示行号
-E 使用扩展正则匹配 grep -E =egrep
-A NUM 匹配内容后几行
-B NUM 前
-C NUM 前后

sed基本用法 Stream EDitor
 行编辑器
机制：每次读取一行到内存空间，然后在处理，在输出，这个空间叫模式空间
逐行读取
默认不编辑源文件，仅对模式空间的数据处理,处理结束后，将模式空间的内容打印到屏幕
sed [OPTION]... {script-only-if-no-other-script} [input-file]

sed 'AddressCommad' file...
Address:
1.startline,endline
  比如1,100
  最后一行$
2./Regexp/
  比如/^root/
3./Pattern1/,/Pattern2/ 第一次被模式1匹配开始到第一次被模式2匹配到的行结束，中间所有的行
4.指定的行
5.startline,+NUM

options:
 -n 静默模式，不在默认显示模式空间的内容
  -i 直接修改源文件
  -e script -e script 可以同时执行多个脚本
  -f /PATH/TO/sed_script_file 读取文件内的指令来处理文件
  -r 表示使用扩展的正则表达式  如使用字符集

command
  d:删除符合条件的行  被匹配的会被删除
   sed '1,2d' /ect/passwd
  p:打印符合条件的行
   sed '/^\//d' /etc/passwd
  a \string 在指定的行后面追加新行，内容为 "string" \n可以换行
  i \string 在指定的行前添加新行，内容为string  
  r FILE 将地址指定的文件内容添加至符合条件出 “文件合并一般用于中间内容合并 末尾用 cat a b”
  w FILE 将地址指定的范围内的内容另存到指定文件中  ”从文件中抽取内容保存到新文件”
  
  s/Pattern/string/修饰符    查找并替换，默认值替换每行中第一次被模式匹配到的字符串
	如果全部替换
	-g 全局替换，每行匹配到的就替换
	-i 查找时忽略字符大小写
    	s///   s@@@   s###
        \(\)  \1   \2  支持分组
          比如   l..e   like-->liker
                 love-->lover
                 sed 's#\(l..e\)#\1r#g'
         & 引用前面匹配到的所有
           sed 's#l..e#&r#'


grep 'pattern' inputfile
sed 'command/pattern/修饰符'
sed 's///gi'

awk
报告生成器，从文本中抽取符合条件的信息，并以特定形式显示出来（格式化）
gawk--awk
which awk
ls -l /usr/bin/awk

awk [options] 'script' file1 file2...
awk [options] 'pattern {action}' file1 file2...
默认action 打印 print printf
所有的都要用''括起来，所有的动作都要用{}括起来

基本处理机制
一次从文件中抽取一行文本-->按照分隔符自动切片，默认空白字符做分隔符-->
this is a test.
$1   $2 $3 $4
$0表示一整行
awk 'BEGIN{OFS=":"}{print $1,"hello",$2,$3}'

awk 'BEGIN {print "line one\nline two\nline three"}'
awk -F: '{print $1,$3}' /etc/passwd

awk内置变量
内置变量之记录变量
 FS 输入字段的分隔符 <--> -F 默认是空白字符
 RS 输入的换行符 默认是回车符
 OFS 输出的字段分隔符
 ORS 输出的行分隔符
内置变量之数据变量
NR awk处理的记录数，行数，如果有多个文件，这个数目会把处理的多个文件统一计数
FNR 当前处理的文件中被awk处理的行数
NF 正在处理的当前行有多少个字段
  当前行的最后一个字段$NF
ARGV 数组，保存命令行本身这个字符串，如awk '{print $0}' a.txt b.txt中，ARGV[0]保存awk,ARGV[1]保存a.txt
ARGC awk命令参数的个数
FILENAME awk所处理的文件名称
ENVIRON 当前shell环境变量及其值的关联数组  awk 'BEGIN{print ENVIRON["PATH"]}'

用户自定义变量
字母数字下划线，不能数字开头，区分大小写
自定义方式：
1.BEGIN中
  awk 'BEGIN {var="variable";print var}' 或awk 'BEGIN {var="variable"}{print var}' file
2.命令行中赋值
awk -v var="variable" 'BEGIN{print var}'

printf
printf format,item1,item2...
要点
1与print最大不同时printf需要指定format
2format 用于指定后面的每个item的输出格式
3printf语句不会自动打印换行符 \n

format格式都是指示符以%开头，后跟一个字符，如下
%c 显示单个字符
%d,%i十进制整数
%e,%E科学计数法显示数值
%f 显示浮点数
%g %G 以科学技术法或浮点数格式显示数值
%s 显示字符串
%u 无符号整数
%% 显示%自身
格式和格式之间不用分割
每一个fomart都可以使用修饰符
N 显示宽度
-左对齐
+显示数值符号
   %-s ,%10s

awk -F: '{printf "%-15s %i\n",$1,$3}' /etc/passwd
awk -F: '{printf "%5d\n",$3}' /etc/passwd

算数操作符
-x 负值
+x 转换为数值
x^y 次方
x**y 次方
x*y 乘法
x/y 除法
x+y
x-y
x%y

字符串操作符
只有一个不用写出来，用于实现字符串连接

赋值操作符
=
+=
-=
*=
/=
%=
^=
**=
++
--
需要注意的是如果某模式为=号，此时使用/=/可能会有语法错误，应以/[=]/替代

布尔
awk中任何非0值或非空字符串都为真，反之为假

比较操作符
x<y
x<=y
x>y
x>=y
x==y
x!=y
x~y True if the string x matches the regexp denoted by y
x!~y
subscript in array 元素是否在数组中存在

表达式间的逻辑关系符
&&
||

条件表达式 三木操作符
selector?if-true-exp:if-false-exp
a=3
b=4
a>b?a is max:b is max

函数调用
function_name (para1,para2)

awk 使用：
awk 'program' input-file1 input-file2 ...
其中的program
pattern { action }
pattern { action }
...
常见的模式类型
1 reggex 正则表达式，格式为/regular expression/
2 expresssion 表达式 其值非0或为非空字符时满足条件，$1 ~ /foo/ 或$1 == "abcabc" 用运算符~（匹配）和!~(不匹配).
3.ranges 指定匹配范围 格式为part1,part2
4.BEGIN/END 特殊模式，仅在awk命令执行前运行一次，或结束前运行一次
5.empty(空模式)，匹配任意输入行
awk -F: 'BEGIN{printf "%-20s%-20s%-20s\n","username","id","shell"}{printf "%-20s%-20s%-20s\n",$1,$3,$7}END{print "end of report"}' /etc/passwd

常见的action
1.expressions 
2 control statements
3 compound statements
4 input statements
5 output statements

/正则表达式/：使用通配符的扩展集
关系表达式：可以用下面运算符表中的运算符进行操作，可以是字符串或数字的比较，如$2>%1选择第二个字段比第一个字段长的行

模式匹配表达式
模式：模式指定一个行的范围，该语法不能包括BEGIN和END模式
BEGIN 让用户指定在第一条输入记录被处理之前所发生的动作，通常可在这里设置全局变量
END:让用户在最后一条输入记录被读取之后发生的动作

控制语句：
if-else
语法 if (condition) {then-body} else {[else-body]}
awk -F: '{if ($1=="root") print $1,"Admin";else print $1,"common user"}' /etc/passwd
awk -F: '{if ($1=="root")printf "%-20s:%s\n",$1,"Admin";else printf "%-20s:%s\n",$1,"common user"}' /etc/passwd
awk -F: -v sum=0 '{if ($3>=500)} sum++}END{print sum}' /etc/passwd
awk -F: 'BEGIN{sum=0}{if ($3>=500) sum++}END{print sum}' /etc/passwd

while
语法 while (condition){statement1;statement2;...}
awk -F: '{i=1;while (i<=3){print $i;i++}}' /etc/passwd

do-while
语法 do {statement1,statement2,...} while (condition)
awk -F: '{i=1;do {print $i;i++}while (i<=3)}' /etc/passwd

for
语法 for (variable assignment;condition;iteration process){statement1,statement2,...}
awk -F: '{for(i=1;i<=3;i++) print $i}' /etc/passwd

for循环还可以用来遍历数组元素
语法 for(i in array){statement1,statement2,...}
awk -F: '$NF!~/^$/{BASH[$NF]++}END{for(A in BASH){printf "%15s:%i\n",A,BASH[A]}}' /etc/passwd

case
语法 switch (expression) {case value or /REGexp/:statement1,statement2,... default:statement1,...}

break continue
常用与循环或case中

next
提前结束对于本行文本的处理，并接着处理下一行
awk -F: '{if($3%2==0) next;print $1,$3}' /etc/passwd

awk中使用数组
数组
array 没看完视频
